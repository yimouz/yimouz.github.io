<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java调用get请求</title>
      <link href="/2022/10/14/java-diao-yong-get-qing-qiu/"/>
      <url>/2022/10/14/java-diao-yong-get-qing-qiu/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpStatus<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span>RequestConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>CloseableHttpResponse<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>HttpPost<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>StringEntity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span>CloseableHttpClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span>HttpClients<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>PoolingHttpClientConnectionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EntityUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLConnection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpRequest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> PoolingHttpClientConnectionManager POOL_CONN_MANAGER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoolingHttpClientConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> CloseableHttpClient closeableHttpClient<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        POOL_CONN_MANAGER<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        POOL_CONN_MANAGER<span class="token punctuation">.</span><span class="token function">setDefaultMaxPerRoute</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">HttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CloseableHttpClient <span class="token function">getHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> closeableHttpClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>HttpRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> closeableHttpClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    closeableHttpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">setConnectionManager</span><span class="token punctuation">(</span>POOL_CONN_MANAGER<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">evictExpiredConnections</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">disableAutomaticRetries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">evictIdleConnections</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> closeableHttpClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向指定URL发送GET方法的请求     * @param url     * 发送请求的URL     * @param param     * 请求参数,请求参数应该是 name1=value1&amp;name2=value2 的形式。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">sendGet</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        BufferedReader in <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String urlNameString <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> param<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>urlNameString<span class="token punctuation">)</span><span class="token punctuation">;</span>            URL realUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>urlNameString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 打开和URL之间的连接</span>            URLConnection connection <span class="token operator">=</span> realUrl<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置通用的请求属性</span>            connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">,</span> <span class="token string">"*/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token string">"Keep-Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">,</span>                    <span class="token string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 建立实际的连接</span>            connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取所有响应头字段</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> map <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getHeaderFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 遍历所有的响应头字段</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 定义 BufferedReader输入流来读取URL的响应</span>            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>                    connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">+=</span> line<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送GET请求出现异常！"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 使用finally块来关闭输入流</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e2<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Jmeter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmeter-java-get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jmeter——BeanShell 内置变量vars、props、prev的使用摘录</title>
      <link href="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/"/>
      <url>/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Jmeter——BeanShell-内置变量vars、props、prev的使用"><a href="#Jmeter——BeanShell-内置变量vars、props、prev的使用" class="headerlink" title="Jmeter——BeanShell 内置变量vars、props、prev的使用"></a>Jmeter——BeanShell 内置变量vars、props、prev的使用</h1><p>在使用Jmeter过程中，或多或少都会接触些BeanShell，它会使工具的使用，变得更灵活。</p><p>Jmeter中关于BeanShell的有：<br>　<br>　　1.BeanShell Sampler 取样器：完成Beanshell请求组件中定义的脚本功能；</p><p>　　2.BeanShell PostProcessor 后置处理器：可通过编程方式获取对应请求的响应结果；　　</p><p>　　3.BeanShell PreProcessor 前置处理器：可通过编程方式在发起请求以前做预处理，比如编码或者加密；</p><p>　　4.Beanshell 断言：可通过编程方式实现复杂的断言逻辑；</p><p>　　5.Beanshell 计时器：编码实现条件定时功能；</p><p>　　6.BeanShell Listener 监听器：监听Beanshell运行结果。</p><p>目前我使用较多的是前三种元件。使用过程中，就会使用一些内置变量，所以这也是今天的主要内容。</p><h2 id="vars"><a href="#vars" class="headerlink" title="vars"></a>vars</h2><p>vars 在 JMeter 内部，映射 org.apache.jmeter.threads 的 JMeterVariables 类，官方文档：<a href="https://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html" target="_blank" rel="noopener">https://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html</a></p><p><strong>注意点：</strong></p><ul><li>vars 提供了对当前线程变量的读写能力</li><li>所有的 JMeter 变量都是 java字符串</li><li>把数据存放到一个 JMeter 变量中，需要先将它转换成字符串</li></ul><h3 id="getThreadName"><a href="#getThreadName" class="headerlink" title="getThreadName"></a>getThreadName</h3><p>方法声明<br>public String getThreadName()</p><p>功能<br>获取当前运行线程名</p><pre class=" language-java"><code class="language-java">String threadName <span class="token operator">=</span> vars<span class="token punctuation">.</span><span class="token function">getThreadName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"threadName:"</span>  <span class="token operator">+</span> threadName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/1.png"><h3 id="getIteration"><a href="#getIteration" class="headerlink" title="getIteration"></a>getIteration</h3><p>方法声明<br>public int getIteration()</p><p>功能<br>获取线程当前的迭代号</p><pre class=" language-dart"><code class="language-dart">int itNum <span class="token operator">=</span> vars<span class="token punctuation">.</span><span class="token function">getIteration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String num <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>itNum<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"itNum："</span>  <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://img2022.cnblogs.com/blog/1242227/202210/1242227-20221003215135011-1829776070.png" target="_blank" rel="noopener"><img src="//yimouz.github.io/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/2.png" alt="img"></a></p><p>这里有个注意点，就是在开始时候提到的，数据放到变量中，需要将数据转换成String类型。</p><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>方法声明<br>public void put(String key, String value)</p><p>Parameters:<br>key - the variable name<br>value - the variable value</p><p>功能<br>创建或更新字符串变量</p><p>创建变量</p><pre class=" language-python"><code class="language-python">vars<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vars<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String varsName <span class="token operator">=</span> vars<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"varsName："</span><span class="token operator">+</span> varsName<span class="token punctuation">)</span><span class="token punctuation">;</span>String varsAge <span class="token operator">=</span> vars<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"varsAge："</span><span class="token operator">+</span> varsAge<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意点：age字段值5，需要是字符串类型，否则会报错。</p><pre><code>Error in method invocation: Method put( java.lang.String, int ) not found in class'org.apache.jmeter.threads.JMeterVariables'</code></pre><p>修改变量</p><pre class=" language-python"><code class="language-python">vars<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒 博客园"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String varsName <span class="token operator">=</span> vars<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"varsName："</span><span class="token operator">+</span> varsName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/3.png"><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>方法声明<br>public String get(String key)</p><p>功能<br>获取变量的值并将其转换为字符串，若变量存在则将值转换为字符串，否则返回 null</p><pre class=" language-vbnet"><code class="language-vbnet">String varsSex = vars.get("sex");log.info("varsSex："+ varsSex);</code></pre><p>在put方法中，已经使用了get的方法，这里列举个获取不到变量的情况，返回null</p><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/4.png"><h3 id="putObject"><a href="#putObject" class="headerlink" title="putObject"></a>putObject</h3><p>方法声明<br>public void putObject(String key,Object value)</p><p>Parameters:<br>key - the variable name<br>value - the variable value</p><p>功能<br>创建或更新一个非字符串变量。</p><pre class=" language-python"><code class="language-python">vars<span class="token punctuation">.</span>putObject<span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vars<span class="token punctuation">.</span>putObject<span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vars<span class="token punctuation">.</span>putObject<span class="token punctuation">(</span><span class="token string">"array"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token keyword">as</span> int<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vars<span class="token punctuation">.</span>putObject<span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"温一壶清酒"</span><span class="token punctuation">,</span><span class="token string">"source"</span><span class="token punctuation">:</span><span class="token string">"博客园"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"number："</span><span class="token operator">+</span> vars<span class="token punctuation">.</span>getObject<span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"list："</span><span class="token operator">+</span> vars<span class="token punctuation">.</span>getObject<span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"array："</span><span class="token operator">+</span> vars<span class="token punctuation">.</span>getObject<span class="token punctuation">(</span><span class="token string">"array"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"map："</span><span class="token operator">+</span> vars<span class="token punctuation">.</span>getObject<span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/5.png"><h3 id="getObject"><a href="#getObject" class="headerlink" title="getObject"></a>getObject</h3><p>方法声明<br>public Object getObject(String key)</p><p>功能<br>获取变量的值（不转换为字符串）。若变量不存在则返回null</p><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>方法声明<br>public Object remove(String key)</p><p>功能<br>删除一个变量，并返回变量的值，若变量不存在则返回 null</p><pre class=" language-lua"><code class="language-lua">vars<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒 博客园"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vName <span class="token operator">=</span> vars<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"vName："</span><span class="token operator">+</span> vName<span class="token punctuation">)</span><span class="token punctuation">;</span>vSex <span class="token operator">=</span> vars<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"vSex："</span><span class="token operator">+</span> vSex<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/6.png"><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>props 映射 java.util 的 Properties 类。java.util.Properties 这个类是线程安全的；多个线程可以共享一个 Properties 对象</p><h3 id="vars跟props的区别"><a href="#vars跟props的区别" class="headerlink" title="vars跟props的区别"></a>vars跟props的区别</h3><ul><li>vars 是对变量进行读写操作， 而 props 主要是对属性进行读写操作</li><li>vars 只能在当前线程组内使用，props 可以跨线程组使用 ，因为属性可以跨线程组但是变量不行</li><li>vars 只能保存 String 或者 Object，props 可以是 Hashtable 或者 Object</li></ul><h3 id="getProperty"><a href="#getProperty" class="headerlink" title="getProperty"></a>getProperty</h3><p>方法声明<br>public String getProperty(String key)</p><p>public String getProperty(String key, String defaultValue)：当 key 不存在则返回默认值</p><p>功能<br>用指定的key在此属性列表中搜索属性，如果在此属性列表中未找到该key，则接着递归检查默认属性列表及其默认值。如果未找到属性，则此方法返回 null</p><pre class=" language-lua"><code class="language-lua">timeFormat <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jmeter.save.saveservice.timestamp_format"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"timeFormat："</span><span class="token operator">+</span> timeFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>propsTest <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jmeter.save.saveservice.timestamp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"propsTest："</span><span class="token operator">+</span> propsTest<span class="token punctuation">)</span><span class="token punctuation">;</span>propsTest <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jmeter.save.saveservice.timestamp"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒 博客园"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"propsTest："</span><span class="token operator">+</span> propsTest<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/7.png"><h3 id="get-1"><a href="#get-1" class="headerlink" title="get"></a>get</h3><p>方法声明<br>public synchronized V get(Object key)</p><p>功能<br>获取属性值，跟 getProperty 类似</p><pre class=" language-csharp"><code class="language-csharp">pTimeFormat <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"jmeter.save.saveservice.timestamp_format"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"pTimeFormat："</span><span class="token operator">+</span> pTimeFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>pPropsTest <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"jmeter.save.saveservice.timestamp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"pPropsTest："</span><span class="token operator">+</span> pPropsTest<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="setProperty"><a href="#setProperty" class="headerlink" title="setProperty"></a>setProperty</h3><p>方法声明<br>public Object setProperty(String key,String value)</p><p>功能<br>设置属性值</p><pre class=" language-lua"><code class="language-lua">props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"pName"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>propsName <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"pName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"propsName："</span><span class="token operator">+</span> propsName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/8.png"><h3 id="put-1"><a href="#put-1" class="headerlink" title="put"></a>put</h3><p>方法声明<br>public synchronized V put(Object key)</p><p>功能<br>设置属性值，跟 setProperty 类似</p><pre class=" language-csharp"><code class="language-csharp">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pName"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pPropsName <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"pName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"pPropsName："</span><span class="token operator">+</span> pPropsName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="propertyNames"><a href="#propertyNames" class="headerlink" title="propertyNames"></a>propertyNames</h3><p>方法声明<br>public Enumeration&lt;?&gt; propertyNames()</p><p>功能<br>返回属性列表中所有key的枚举，如果在主属性列表中未找到同名的key，则包括默认属性列表中不同的key</p><pre class=" language-lua"><code class="language-lua">propsNames <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">propertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>propsNames<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/9.png"><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>方法声明<br>public int size()</p><p>功能<br>返回有多少个属性</p><pre class=" language-matlab"><code class="language-matlab">pPropsCount <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>"pPropsCount："<span class="token operator">+</span> pPropsCount<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/10.png"><h3 id="remove-1"><a href="#remove-1" class="headerlink" title="remove"></a>remove</h3><p>方法声明<br>public synchronized V remove(Object key)</p><p>功能<br>删除一个变量，并返回变量的值，若变量不存在则返回 null</p><pre class=" language-lua"><code class="language-lua">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pName"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rName <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"pName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"rName："</span><span class="token operator">+</span> rName<span class="token punctuation">)</span><span class="token punctuation">;</span>rSex <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"rSex："</span><span class="token operator">+</span> rSex<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/11.png"><h2 id="prev"><a href="#prev" class="headerlink" title="prev"></a>prev</h2><p>prev 提供对当前取样器结果的访问能力，映射 org.apache.jmeter.samplers 的 SampleResult 类<br>官方文档： <a href="https://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html" target="_blank" rel="noopener">https://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html</a></p><h3 id="getResponseCode"><a href="#getResponseCode" class="headerlink" title="getResponseCode"></a>getResponseCode</h3><p>方法声明<br>public String getResponseCode()</p><p>功能<br>获取响应状态码</p><pre class=" language-lua"><code class="language-lua">responseCode <span class="token operator">=</span> prev<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"responseCode："</span> <span class="token operator">+</span> responseCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">057</span> INFO o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>j<span class="token punctuation">.</span>u<span class="token punctuation">.</span>BeanShellTestElement<span class="token punctuation">:</span> responseCode：<span class="token number">200</span></code></pre><h3 id="isResponseCodeOK"><a href="#isResponseCodeOK" class="headerlink" title="isResponseCodeOK"></a>isResponseCodeOK</h3><p>方法声明<br>public boolean isResponseCodeOK()</p><p>功能<br>判断响应状态码是否为OK对应的状态码（200），结果只有true和false</p><pre class=" language-lua"><code class="language-lua">responseCodeBoolean <span class="token operator">=</span> prev<span class="token punctuation">.</span><span class="token function">isResponseCodeOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"responseCodeBoolean："</span> <span class="token operator">+</span> responseCodeBoolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">36</span><span class="token punctuation">:</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">077</span> INFO o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>j<span class="token punctuation">.</span>u<span class="token punctuation">.</span>BeanShellTestElement<span class="token punctuation">:</span> responseCodeBoolean：<span class="token keyword">true</span></code></pre><h3 id="getThreadName-1"><a href="#getThreadName-1" class="headerlink" title="getThreadName"></a>getThreadName</h3><p>方法声明<br>public String getThreadName()</p><p>功能<br>获取线程名</p><pre class=" language-lua"><code class="language-lua">prevThreadName <span class="token operator">=</span> prev<span class="token punctuation">.</span><span class="token function">getThreadName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"prevThreadName："</span> <span class="token operator">+</span> prevThreadName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">955</span> INFO o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>j<span class="token punctuation">.</span>u<span class="token punctuation">.</span>BeanShellTestElement<span class="token punctuation">:</span> prevThreadName：prevThreadName</code></pre><h3 id="getResponseDataAsString"><a href="#getResponseDataAsString" class="headerlink" title="getResponseDataAsString"></a>getResponseDataAsString</h3><p>方法声明<br>public String getResponseDataAsString()</p><p>功能<br>获取String类型的响应结果</p><pre class=" language-lua"><code class="language-lua">prevResponse <span class="token operator">=</span> prev<span class="token punctuation">.</span><span class="token function">getResponseDataAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"prevResponse："</span> <span class="token operator">+</span> prevResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="getStartTime"><a href="#getStartTime" class="headerlink" title="getStartTime"></a>getStartTime</h3><p>获取请求开始时间</p><h3 id="getEndTime"><a href="#getEndTime" class="headerlink" title="getEndTime"></a>getEndTime</h3><p>获取请求结束时间</p><h3 id="getSamplerData"><a href="#getSamplerData" class="headerlink" title="getSamplerData"></a>getSamplerData</h3><p>获取请求内容</p><p>好了，以上就是平时经常用到的一些内置变量的方法，还有其他的方法，可以参考源码或官方文档。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py文件服务器搭建</title>
      <link href="/2021/10/20/py-wen-jian-fu-wu-qi-da-jian/"/>
      <url>/2021/10/20/py-wen-jian-fu-wu-qi-da-jian/</url>
      
        <content type="html"><![CDATA[<p>背景：每次从win端上传文件到不同的linux，之前一直使用rz嫌弃麻烦，阅读到python有提供一个简易的文件服务器实现，如此便记录一下。</p><p>前置条件:本机（win）有python环境，</p><p>操作过程：</p><ul><li>选择共享的文件夹,地址栏 键入: cmd，进入dos交互页：<code>python -m http.server</code></li><li>尝试访问网页ip:8000，若能打开服务，至此一个简漏的共享文件服务器就搭好了；</li><li>linux里面wget想要的包</li><li>带有浏览器的直接可以在ip:port打开实例</li></ul><p>隐藏cmd黑框，并开机自启：win桌面上，cmd的大黑框比较碍眼，可以起个bat文件，内容如下：</p><p><code>@echo off</code><br><code>if "%1"=="h" goto begin</code><br><code>start mshta vbscript:createobject("wscript.shell").run("""%~nx0"" h",0)(window.close)&amp;&amp;exit</code><br><code>:begin</code><br><code>python -m http.server</code><br><code>pause</code></p><ul><li><p>添加到开机自启：</p></li><li><p>使用win+r 弹出运行窗口，输入 shell:startup 弹出启动文件夹，在文件夹内添加bat的快捷方式。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 旮旯杂杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/14/hello-world/"/>
      <url>/2021/10/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>win10网络正常，图标异常修复方式</title>
      <link href="/2021/10/14/win10-geng-xin-hou-de-xian-shi-wu-wang-luo-dan-shi-ke-yi-shang-wang-wen-ti/"/>
      <url>/2021/10/14/win10-geng-xin-hou-de-xian-shi-wu-wang-luo-dan-shi-ke-yi-shang-wang-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="注册表有所变化，将他改回去"><a href="#注册表有所变化，将他改回去" class="headerlink" title="##注册表有所变化，将他改回去"></a>##注册表有所变化，将他改回去</h1><p>1.crtl+r 输入regedit</p><p>2.path这边键入定位如下</p><p>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NlaSvc\Parameters\Internet</p><p>3.手动戳如下</p><pre class=" language-markdown"><code class="language-markdown">"ActiveDnsProbeContent"="131.107.255.255""ActiveDnsProbeContentV6"="fd3e:4f5a:5b81::1""ActiveDnsProbeHost"="dns.msftncsi.com""ActiveDnsProbeHostV6"="dns.msftncsi.com""ActiveWebProbeContent"="Microsoft NCSI""ActiveWebProbeContentV6"="Microsoft NCSI""ActiveWebProbeHost"="www.msftncsi.com""ActiveWebProbeHostV6"="ipv6.msftncsi.com""ActiveWebProbePath"="ncsi.txt""ActiveWebProbePathV6"="ncsi.txt""CaptivePortalTimer"=dword:00000000"CaptivePortalTimerBackOffIncrementsInSeconds"=dword:00000005"CaptivePortalTimerMaxInSeconds"=dword:0000001e"PassivePollPeriod"=dword:0000000f"StaleThreshold"=dword:0000001e"WebTimeout"=dword:00000023"EnableActiveProbing"=dword:00000001</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 旮旯杂杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题杂记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
