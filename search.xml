<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java调用get请求</title>
      <link href="/2022/10/14/java-diao-yong-get-qing-qiu/"/>
      <url>/2022/10/14/java-diao-yong-get-qing-qiu/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpStatus<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span>RequestConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>CloseableHttpResponse<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>HttpPost<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>StringEntity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span>CloseableHttpClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span>HttpClients<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>PoolingHttpClientConnectionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EntityUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLConnection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpRequest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> PoolingHttpClientConnectionManager POOL_CONN_MANAGER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoolingHttpClientConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> CloseableHttpClient closeableHttpClient<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        POOL_CONN_MANAGER<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        POOL_CONN_MANAGER<span class="token punctuation">.</span><span class="token function">setDefaultMaxPerRoute</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">HttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CloseableHttpClient <span class="token function">getHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> closeableHttpClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>HttpRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> closeableHttpClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    closeableHttpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">setConnectionManager</span><span class="token punctuation">(</span>POOL_CONN_MANAGER<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">evictExpiredConnections</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">disableAutomaticRetries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">evictIdleConnections</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> closeableHttpClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向指定URL发送GET方法的请求     * @param url     * 发送请求的URL     * @param param     * 请求参数,请求参数应该是 name1=value1&amp;name2=value2 的形式。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">sendGet</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        BufferedReader in <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String urlNameString <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> param<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>urlNameString<span class="token punctuation">)</span><span class="token punctuation">;</span>            URL realUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>urlNameString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 打开和URL之间的连接</span>            URLConnection connection <span class="token operator">=</span> realUrl<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置通用的请求属性</span>            connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">,</span> <span class="token string">"*/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token string">"Keep-Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">,</span>                    <span class="token string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 建立实际的连接</span>            connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取所有响应头字段</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> map <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getHeaderFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 遍历所有的响应头字段</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 定义 BufferedReader输入流来读取URL的响应</span>            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>                    connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">+=</span> line<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送GET请求出现异常！"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 使用finally块来关闭输入流</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e2<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Jmeter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmeter-java-get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prometheus的node自动发现</title>
      <link href="/2022/05/16/prometheus-de-node-zi-dong-fa-xian/"/>
      <url>/2022/05/16/prometheus-de-node-zi-dong-fa-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="prometheus的node自动发现"><a href="#prometheus的node自动发现" class="headerlink" title="prometheus的node自动发现"></a>prometheus的node自动发现</h1><h2 id="一、正常安装普罗米修斯之后，默认静态配置有所局限性，官方也贴心提供了许多自动发现服务-记录路径发现方式"><a href="#一、正常安装普罗米修斯之后，默认静态配置有所局限性，官方也贴心提供了许多自动发现服务-记录路径发现方式" class="headerlink" title="一、正常安装普罗米修斯之后，默认静态配置有所局限性，官方也贴心提供了许多自动发现服务,记录路径发现方式"></a>一、正常安装普罗米修斯之后，默认静态配置有所局限性，官方也贴心提供了许多自动发现服务,记录路径发现方式</h2><p>在prometheus.yml同级目录下，创建一个node文件夹，用来存放后续想拉取的node配置信息。</p><p>yml配置里采用通配符，指定node目录的*yml</p><p>1.node节点配套规范如下：</p><p>1.1.文件名称node开头 .yml结尾<br>如：<code>node_serviceFind.yml</code></p><p>1.2.编辑node_serviceFind.yml文件<br>示例：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"192.168.56.234:9098"</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">appName</span><span class="token punctuation">:</span> locahost</code></pre><p>–完整的prometheus.yml参考–</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># my global config</span><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 3s <span class="token comment" spellcheck="true"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span>  <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 15s <span class="token comment" spellcheck="true"># Evaluate rules every 15 seconds. The default is every 1 minute.</span>  <span class="token comment" spellcheck="true"># scrape_timeout is set to the global default (10s).</span><span class="token comment" spellcheck="true"># Alertmanager configuration</span><span class="token key atrule">alerting</span><span class="token punctuation">:</span>  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># - alertmanager:9093</span><span class="token comment" spellcheck="true"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># - "first_rules.yml"</span>  <span class="token comment" spellcheck="true"># - "second_rules.yml"</span><span class="token comment" spellcheck="true"># A scrape configuration containing exactly one endpoint to scrape:</span><span class="token comment" spellcheck="true"># Here it's Prometheus itself.</span><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.</span><span class="token comment" spellcheck="true">#  - job_name: "prometheus"</span>    <span class="token comment" spellcheck="true"># metrics_path defaults to '/metrics'</span>    <span class="token comment" spellcheck="true"># scheme defaults to 'http'.</span><span class="token comment" spellcheck="true">#    static_configs:</span><span class="token comment" spellcheck="true">#      - targets: ["localhost:9099"]</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">"nodeTest"</span>    <span class="token key atrule">file_sd_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">files</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'node/node*.yml'</span><span class="token punctuation">]</span>        <span class="token key atrule">refresh_interval</span><span class="token punctuation">:</span> 5m</code></pre><p></p><p>1.3.编辑启动脚本start.sh，指定端口，保留时间</p><pre class=" language-shell"><code class="language-shell">`nohup ./prometheus --web.listen-address=":9099" --storage.tsdb.retention.time=30d &`</code></pre><p>1.4.编辑停止脚本stop.sh</p><pre class=" language-shell"><code class="language-shell">pids=`ps -ef | grep prometheus | grep -v grep| awk '{print $2}'`for pid in $pidsdo   echo "Kill process prometheus $pid...";   kill -9 $pid;   rlt=$?;   if [ $rlt -eq 0 ]; then      echo "Success!!";   else      echo "Failed!!!";   fidone</code></pre><p><strong>二、探针节点上传之后，启动脚本也编辑了方便复用</strong><br>示例如下：<br>文件名 start.sh</p><pre class=" language-shell"><code class="language-shell">nohup ./node_exporter --web.listen-address=":9098" &</code></pre><p>文件名 stop.sh</p><pre class=" language-shell"><code class="language-shell">pids=`ps -ef | grep node_exporter | grep -v grep| awk '{print $2}'`for pid in $pidsdo   echo "Kill process node_exporter $pid...";   kill -9 $pid;   rlt=$?;   if [ $rlt -eq 0 ]; then      echo "Success!!";   else      echo "Failed!!!";   fidone</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 性能日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jmeter——BeanShell 内置变量vars、props、prev的使用摘录</title>
      <link href="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/"/>
      <url>/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Jmeter——BeanShell-内置变量vars、props、prev的使用"><a href="#Jmeter——BeanShell-内置变量vars、props、prev的使用" class="headerlink" title="Jmeter——BeanShell 内置变量vars、props、prev的使用"></a>Jmeter——BeanShell 内置变量vars、props、prev的使用</h1><p>在使用Jmeter过程中，或多或少都会接触些BeanShell，它会使工具的使用，变得更灵活。</p><p>Jmeter中关于BeanShell的有：<br>　<br>　　1.BeanShell Sampler 取样器：完成Beanshell请求组件中定义的脚本功能；</p><p>　　2.BeanShell PostProcessor 后置处理器：可通过编程方式获取对应请求的响应结果；　　</p><p>　　3.BeanShell PreProcessor 前置处理器：可通过编程方式在发起请求以前做预处理，比如编码或者加密；</p><p>　　4.Beanshell 断言：可通过编程方式实现复杂的断言逻辑；</p><p>　　5.Beanshell 计时器：编码实现条件定时功能；</p><p>　　6.BeanShell Listener 监听器：监听Beanshell运行结果。</p><p>目前我使用较多的是前三种元件。使用过程中，就会使用一些内置变量，所以这也是今天的主要内容。</p><h2 id="vars"><a href="#vars" class="headerlink" title="vars"></a>vars</h2><p>vars 在 JMeter 内部，映射 org.apache.jmeter.threads 的 JMeterVariables 类，官方文档：<a href="https://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html" target="_blank" rel="noopener">https://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html</a></p><p><strong>注意点：</strong></p><ul><li>vars 提供了对当前线程变量的读写能力</li><li>所有的 JMeter 变量都是 java字符串</li><li>把数据存放到一个 JMeter 变量中，需要先将它转换成字符串</li></ul><h3 id="getThreadName"><a href="#getThreadName" class="headerlink" title="getThreadName"></a>getThreadName</h3><p>方法声明<br>public String getThreadName()</p><p>功能<br>获取当前运行线程名</p><pre class=" language-java"><code class="language-java">String threadName <span class="token operator">=</span> vars<span class="token punctuation">.</span><span class="token function">getThreadName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"threadName:"</span>  <span class="token operator">+</span> threadName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/1.png"><h3 id="getIteration"><a href="#getIteration" class="headerlink" title="getIteration"></a>getIteration</h3><p>方法声明<br>public int getIteration()</p><p>功能<br>获取线程当前的迭代号</p><pre class=" language-dart"><code class="language-dart">int itNum <span class="token operator">=</span> vars<span class="token punctuation">.</span><span class="token function">getIteration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String num <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>itNum<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"itNum："</span>  <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://img2022.cnblogs.com/blog/1242227/202210/1242227-20221003215135011-1829776070.png" target="_blank" rel="noopener"><img src="//yimouz.github.io/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/2.png" alt="img"></a></p><p>这里有个注意点，就是在开始时候提到的，数据放到变量中，需要将数据转换成String类型。</p><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>方法声明<br>public void put(String key, String value)</p><p>Parameters:<br>key - the variable name<br>value - the variable value</p><p>功能<br>创建或更新字符串变量</p><p>创建变量</p><pre class=" language-python"><code class="language-python">vars<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vars<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String varsName <span class="token operator">=</span> vars<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"varsName："</span><span class="token operator">+</span> varsName<span class="token punctuation">)</span><span class="token punctuation">;</span>String varsAge <span class="token operator">=</span> vars<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"varsAge："</span><span class="token operator">+</span> varsAge<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意点：age字段值5，需要是字符串类型，否则会报错。</p><pre><code>Error in method invocation: Method put( java.lang.String, int ) not found in class'org.apache.jmeter.threads.JMeterVariables'</code></pre><p>修改变量</p><pre class=" language-python"><code class="language-python">vars<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒 博客园"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String varsName <span class="token operator">=</span> vars<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"varsName："</span><span class="token operator">+</span> varsName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/3.png"><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>方法声明<br>public String get(String key)</p><p>功能<br>获取变量的值并将其转换为字符串，若变量存在则将值转换为字符串，否则返回 null</p><pre class=" language-vbnet"><code class="language-vbnet">String varsSex = vars.get("sex");log.info("varsSex："+ varsSex);</code></pre><p>在put方法中，已经使用了get的方法，这里列举个获取不到变量的情况，返回null</p><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/4.png"><h3 id="putObject"><a href="#putObject" class="headerlink" title="putObject"></a>putObject</h3><p>方法声明<br>public void putObject(String key,Object value)</p><p>Parameters:<br>key - the variable name<br>value - the variable value</p><p>功能<br>创建或更新一个非字符串变量。</p><pre class=" language-python"><code class="language-python">vars<span class="token punctuation">.</span>putObject<span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vars<span class="token punctuation">.</span>putObject<span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vars<span class="token punctuation">.</span>putObject<span class="token punctuation">(</span><span class="token string">"array"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token keyword">as</span> int<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vars<span class="token punctuation">.</span>putObject<span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"温一壶清酒"</span><span class="token punctuation">,</span><span class="token string">"source"</span><span class="token punctuation">:</span><span class="token string">"博客园"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"number："</span><span class="token operator">+</span> vars<span class="token punctuation">.</span>getObject<span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"list："</span><span class="token operator">+</span> vars<span class="token punctuation">.</span>getObject<span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"array："</span><span class="token operator">+</span> vars<span class="token punctuation">.</span>getObject<span class="token punctuation">(</span><span class="token string">"array"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"map："</span><span class="token operator">+</span> vars<span class="token punctuation">.</span>getObject<span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/5.png"><h3 id="getObject"><a href="#getObject" class="headerlink" title="getObject"></a>getObject</h3><p>方法声明<br>public Object getObject(String key)</p><p>功能<br>获取变量的值（不转换为字符串）。若变量不存在则返回null</p><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>方法声明<br>public Object remove(String key)</p><p>功能<br>删除一个变量，并返回变量的值，若变量不存在则返回 null</p><pre class=" language-lua"><code class="language-lua">vars<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒 博客园"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vName <span class="token operator">=</span> vars<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"vName："</span><span class="token operator">+</span> vName<span class="token punctuation">)</span><span class="token punctuation">;</span>vSex <span class="token operator">=</span> vars<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"vSex："</span><span class="token operator">+</span> vSex<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/6.png"><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>props 映射 java.util 的 Properties 类。java.util.Properties 这个类是线程安全的；多个线程可以共享一个 Properties 对象</p><h3 id="vars跟props的区别"><a href="#vars跟props的区别" class="headerlink" title="vars跟props的区别"></a>vars跟props的区别</h3><ul><li>vars 是对变量进行读写操作， 而 props 主要是对属性进行读写操作</li><li>vars 只能在当前线程组内使用，props 可以跨线程组使用 ，因为属性可以跨线程组但是变量不行</li><li>vars 只能保存 String 或者 Object，props 可以是 Hashtable 或者 Object</li></ul><h3 id="getProperty"><a href="#getProperty" class="headerlink" title="getProperty"></a>getProperty</h3><p>方法声明<br>public String getProperty(String key)</p><p>public String getProperty(String key, String defaultValue)：当 key 不存在则返回默认值</p><p>功能<br>用指定的key在此属性列表中搜索属性，如果在此属性列表中未找到该key，则接着递归检查默认属性列表及其默认值。如果未找到属性，则此方法返回 null</p><pre class=" language-lua"><code class="language-lua">timeFormat <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jmeter.save.saveservice.timestamp_format"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"timeFormat："</span><span class="token operator">+</span> timeFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>propsTest <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jmeter.save.saveservice.timestamp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"propsTest："</span><span class="token operator">+</span> propsTest<span class="token punctuation">)</span><span class="token punctuation">;</span>propsTest <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jmeter.save.saveservice.timestamp"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒 博客园"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"propsTest："</span><span class="token operator">+</span> propsTest<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/7.png"><h3 id="get-1"><a href="#get-1" class="headerlink" title="get"></a>get</h3><p>方法声明<br>public synchronized V get(Object key)</p><p>功能<br>获取属性值，跟 getProperty 类似</p><pre class=" language-csharp"><code class="language-csharp">pTimeFormat <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"jmeter.save.saveservice.timestamp_format"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"pTimeFormat："</span><span class="token operator">+</span> pTimeFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>pPropsTest <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"jmeter.save.saveservice.timestamp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"pPropsTest："</span><span class="token operator">+</span> pPropsTest<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="setProperty"><a href="#setProperty" class="headerlink" title="setProperty"></a>setProperty</h3><p>方法声明<br>public Object setProperty(String key,String value)</p><p>功能<br>设置属性值</p><pre class=" language-lua"><code class="language-lua">props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"pName"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>propsName <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"pName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"propsName："</span><span class="token operator">+</span> propsName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/8.png"><h3 id="put-1"><a href="#put-1" class="headerlink" title="put"></a>put</h3><p>方法声明<br>public synchronized V put(Object key)</p><p>功能<br>设置属性值，跟 setProperty 类似</p><pre class=" language-csharp"><code class="language-csharp">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pName"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pPropsName <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"pName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"pPropsName："</span><span class="token operator">+</span> pPropsName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="propertyNames"><a href="#propertyNames" class="headerlink" title="propertyNames"></a>propertyNames</h3><p>方法声明<br>public Enumeration&lt;?&gt; propertyNames()</p><p>功能<br>返回属性列表中所有key的枚举，如果在主属性列表中未找到同名的key，则包括默认属性列表中不同的key</p><pre class=" language-lua"><code class="language-lua">propsNames <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">propertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>propsNames<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/9.png"><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>方法声明<br>public int size()</p><p>功能<br>返回有多少个属性</p><pre class=" language-matlab"><code class="language-matlab">pPropsCount <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>"pPropsCount："<span class="token operator">+</span> pPropsCount<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/10.png"><h3 id="remove-1"><a href="#remove-1" class="headerlink" title="remove"></a>remove</h3><p>方法声明<br>public synchronized V remove(Object key)</p><p>功能<br>删除一个变量，并返回变量的值，若变量不存在则返回 null</p><pre class=" language-lua"><code class="language-lua">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pName"</span><span class="token punctuation">,</span><span class="token string">"温一壶清酒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rName <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"pName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"rName："</span><span class="token operator">+</span> rName<span class="token punctuation">)</span><span class="token punctuation">;</span>rSex <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"rSex："</span><span class="token operator">+</span> rSex<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="/2022/05/14/nei-zhi-bian-liang-vars-props-prev-de-shi-yong/11.png"><h2 id="prev"><a href="#prev" class="headerlink" title="prev"></a>prev</h2><p>prev 提供对当前取样器结果的访问能力，映射 org.apache.jmeter.samplers 的 SampleResult 类<br>官方文档： <a href="https://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html" target="_blank" rel="noopener">https://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html</a></p><h3 id="getResponseCode"><a href="#getResponseCode" class="headerlink" title="getResponseCode"></a>getResponseCode</h3><p>方法声明<br>public String getResponseCode()</p><p>功能<br>获取响应状态码</p><pre class=" language-lua"><code class="language-lua">responseCode <span class="token operator">=</span> prev<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"responseCode："</span> <span class="token operator">+</span> responseCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">057</span> INFO o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>j<span class="token punctuation">.</span>u<span class="token punctuation">.</span>BeanShellTestElement<span class="token punctuation">:</span> responseCode：<span class="token number">200</span></code></pre><h3 id="isResponseCodeOK"><a href="#isResponseCodeOK" class="headerlink" title="isResponseCodeOK"></a>isResponseCodeOK</h3><p>方法声明<br>public boolean isResponseCodeOK()</p><p>功能<br>判断响应状态码是否为OK对应的状态码（200），结果只有true和false</p><pre class=" language-lua"><code class="language-lua">responseCodeBoolean <span class="token operator">=</span> prev<span class="token punctuation">.</span><span class="token function">isResponseCodeOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"responseCodeBoolean："</span> <span class="token operator">+</span> responseCodeBoolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">36</span><span class="token punctuation">:</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">077</span> INFO o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>j<span class="token punctuation">.</span>u<span class="token punctuation">.</span>BeanShellTestElement<span class="token punctuation">:</span> responseCodeBoolean：<span class="token keyword">true</span></code></pre><h3 id="getThreadName-1"><a href="#getThreadName-1" class="headerlink" title="getThreadName"></a>getThreadName</h3><p>方法声明<br>public String getThreadName()</p><p>功能<br>获取线程名</p><pre class=" language-lua"><code class="language-lua">prevThreadName <span class="token operator">=</span> prev<span class="token punctuation">.</span><span class="token function">getThreadName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"prevThreadName："</span> <span class="token operator">+</span> prevThreadName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">955</span> INFO o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>j<span class="token punctuation">.</span>u<span class="token punctuation">.</span>BeanShellTestElement<span class="token punctuation">:</span> prevThreadName：prevThreadName</code></pre><h3 id="getResponseDataAsString"><a href="#getResponseDataAsString" class="headerlink" title="getResponseDataAsString"></a>getResponseDataAsString</h3><p>方法声明<br>public String getResponseDataAsString()</p><p>功能<br>获取String类型的响应结果</p><pre class=" language-lua"><code class="language-lua">prevResponse <span class="token operator">=</span> prev<span class="token punctuation">.</span><span class="token function">getResponseDataAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"prevResponse："</span> <span class="token operator">+</span> prevResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="getStartTime"><a href="#getStartTime" class="headerlink" title="getStartTime"></a>getStartTime</h3><p>获取请求开始时间</p><h3 id="getEndTime"><a href="#getEndTime" class="headerlink" title="getEndTime"></a>getEndTime</h3><p>获取请求结束时间</p><h3 id="getSamplerData"><a href="#getSamplerData" class="headerlink" title="getSamplerData"></a>getSamplerData</h3><p>获取请求内容</p><p>好了，以上就是平时经常用到的一些内置变量的方法，还有其他的方法，可以参考源码或官方文档。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统下的TCP参数优化</title>
      <link href="/2022/04/19/windows-xi-tong-xia-de-tcp-can-shu-you-hua/"/>
      <url>/2022/04/19/windows-xi-tong-xia-de-tcp-can-shu-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows系统下的TCP参数优化"><a href="#Windows系统下的TCP参数优化" class="headerlink" title="Windows系统下的TCP参数优化"></a>Windows系统下的TCP参数优化</h1><p>TCP连接的状态与关闭方式及其对Server与Client的影响</p><p>通常会采用修改注册表的方式改进Windows的系统参数。下面将为大家介绍Windows系统下的TCP参数优化方式，适用于Windows 2003、Windows XP、Windows 7以及Server版。对于具体的系统环境与性能需求，优化方式会有所差异，效果也不尽相同，仅是个人的建议。所有的优化操作都通过修改注册表实现，需要使用regedit命令进入注册表并创建或修改参数，修改完成后需要重启系统，以使之生效。以下使用的参数值均为10进制。</p><h2 id="1-TCPWindowSize"><a href="#1-TCPWindowSize" class="headerlink" title="1.TCPWindowSize"></a>1.TCPWindowSize</h2><p>　　TCPWindowSize的值表示TCP的窗口大小。TCP Receive Window（TCP数据接收缓冲）定义了发送端在没有获得接收端的确认信息的状态下可以发送的最大字节数。此数值越大，返回的确认信息就越少，相应的在发送端和接收端之间的通信就越好。此数值较小时可以降低发送端在等待接收端返回确认信息时发生超时的可能性，但这将增加网络流量，降低有效吞吐率。TCP在发送端和接收端之间动态调整一个最大段长度MSS（Maximum Segment Size）的整数倍。MSS在连接开始建立时确定，由于TCP Receive Window被调整为MSS的整数倍，在数据传输中完全长度的TCP数据段的比例增加，故而提高了网络吞吐率。</p><p>　　缺省情况下，TCP将试图根据MSS来优化窗口大小，起始值为16KB，最大值为64KB。TCPWindowSize的最大值通常为65535字节（64KB），以太网最大段长度为1460字节，低于64KB的1460的最大整数倍为62420字节，因而可以在注册表中将TCPWindowSize设置为62420，作为高带宽网络中适用的性能优化值。具体操作如下：</p><p>　　浏览至HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TCPIP\Parameters注册表子键，在Parameters子键下创建或修改名为TCPWindowSize的REG_DWORD值，该值的范围是从0到65535，将该值设置为62420。</p><h2 id="2-TCP1323Opts"><a href="#2-TCP1323Opts" class="headerlink" title="2.TCP1323Opts　"></a>2.TCP1323Opts　</h2><p>　　为了更高效地利用高带宽网络，可以使用比上述TCP窗口大得多的TCP窗口大小，此特性是Windows 2000和Windows Server 2003中的新特性，称为TCP Window Scaling，它将以前的65535字节（64KB）的限制提高到了1073741824字节（1GB）。在带宽与延迟的乘积值很高的连接上（例如卫星连接），可能需要将窗口的大小增加到64KB以上。使用TCP Window Scaling，系统可以允许确认信息间更大数据量的传输，增加了网络吞吐量及性能。发送端和接收端往返通信所需的时间被称为回环时间（RTT）。TCP Window Scaling仅在TCP连接的双方都开启时才真正有效。TCP有一个时间戳选项，通过更加频繁地计算来提高RTT值的估测值，此选项特别有助于估测更长距离的广域网上连接的RTT值，并更加精确地调整TCP重发超时时间。时间戳在TCP报头提供了两个区域，一个记录开始重发的时间，另一个记录接收到的时间。时间戳对于TCP Window Scaling，即确认信息收到前的大数据包传送特别有用，激活时间戳仅仅在每个数据包的头部增加12字节，对网络流量的影响微乎其微。数据完整性与数据吞吐率最大化哪个更为重要是个需要评估的问题。在某些环境中，例如视频流传输，需要更大的TCP窗口，这是最重要的，而数据完整性排在第二位。在这种环境中，TCP Window Scaling可以不打开时间戳。当发送端和接收端均激活TCP Window Scaling和时间戳时，此特性才有效。不过，若在发包时加入了时间戳，经过NAT之后，如果前面相同的端口被使用过，且时间戳大于这个连接发出的SYN中的时间戳，就会导致服务器忽略该SYN，表现为用户无法正常完成TCP的3次握手。初始时生成小的TCP窗口，之后窗口大小将按照内部算法增大。具体操作如下：</p><p>　　浏览至HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TCPIP\Parameters注册表子键，在Parameters子键下创建或修改名为TCP1323Opts的REG_DWORD值，该值的具体含义为：0（缺省值）表示禁用TCP Window Scaling和时间戳；1表示只启用TCP Window Scaling；2表示只启用时间戳；3表示同时启用TCP Window Scaling和时间戳。TCP1323Opts设置为激活TCP Window Scaling后，可以将上文中的注册表项TCPWindowSize的值增大，最大能达到1GB，为了达到最佳性能，这里的值最好设置成MSS的倍数，推荐值为256960字节。</p><h2 id="3-TCP-控制块表"><a href="#3-TCP-控制块表" class="headerlink" title="3.TCP 控制块表"></a>3.TCP 控制块表</h2><p>　　对于每个TCP连接，控制变量保存在一个称为TCP控制块（TCB）的内存块中。TCB表的大小由注册表项MaxHashTableSize控制。在活动连接很多的系统中，设定一个较大的表可以降低系统定位TCB表的时间。在TCB表上分区可以降低对表的访问的争夺。增加分区的数量，TCP的性能会得到优化，特别是在多处理器的系统上。注册表项NumTcbTablePartitions控制分区的数量，默认是处理器个数的平方。TCB通常预置在内存中，以防止TCP反复连接和断开时，TCB反复重新定位浪费时间，这种缓冲的方式促进了内存管理，但同时也限制了同一时刻允许的TCP连接数量。注册表项MaxFreeTcbs决定了处于空闲等待状态的TCB重新可用之前的连接数量，在NT架构中常设置成高于默认值，以确保有足够的预置的TCB。从Windows 2000开始添加了一个新特性，降低超出预置TCB运行的可能性。如果处于等待状态的连接多于MaxFreeTWTcbs中的设置，所有等待时间超过60秒的连接将被强制关闭，以后再次启用。此特性合并到Windows 2000 Server和Windows Server 2003后，MaxFreeTcbs将不再用于优化性能。具体操作：</p><p>　　浏览至HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TCPIP\Parameters注册表子键，在Parameters子键下创建或修改名为MaxHashTableSize的REG_DWORD值，该值的范围是从1到65536，并且必须为2的N次方，缺省值为512，建议设为8192。然后在Parameters子键下创建或修改名为NumTcbTablePartitions的REG_DWORD值，该值的范围是从1到65536，并且必须为2的N次方，缺省值为处理器个数的平方，建议设为处理器核心数的4倍。</p><h2 id="4-TcpTimedWaitDelay"><a href="#4-TcpTimedWaitDelay" class="headerlink" title="4.TcpTimedWaitDelay"></a>4.TcpTimedWaitDelay</h2><p>　　TcpTimedWaitDelay的值表示系统释放已关闭的TCP连接并复用其资源之前，必须等待的时间。这段时间间隔就是以前的Blog中提到的TIME_WAIT状态（2MSL，数据包最长生命周期的两倍状态）。如果系统显示大量连接处于TIME_WAIT状态，则会导致并发量与吞吐量的严重下降，通过减小该项的值，系统可以更快地释放已关闭的连接，从而为新连接提供更多的资源，特别是对于高并发短连接的Server具有积极的意义。</p><p>　　该项的缺省值是240，即等待4分钟后释放资源；系统支持的最小值为30，即等待时间为30秒。具体操作：</p><p>　　浏览至HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TCPIP\Parameters注册表子键，在Parameters子键下创建或修改名为TcpTimedWaitDelay的REG_DWORD值，该值的范围是从0到300，建议将该值设置为30。</p><h2 id="5-MaxUserPort"><a href="#5-MaxUserPort" class="headerlink" title="5.MaxUserPort"></a>5.MaxUserPort</h2><p>　　MaxUserPort的值表示当应用程序向系统请求可用的端口时，TCP/IP可分配的最大端口号。如果系统显示建立连接时出现异常，那么有可能是由于匿名（临时）端口数不够导致的，特别是当系统打开大量端口来与Web service、 数据库或其他远程资源建立连接时。</p><p>　　该项的缺省值是十进制的5000，这也是 系统允许的最小值。Windows默认为匿名（临时）端口保留的端口号范围是从1024到5000。为了获得更高的并发量，建议将该值至少设为32768以上，甚至设为理论最大值65534，特别是对于模拟高并发测试环境的Client具有积极的意义。具体操作：</p><p>　　浏览至HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TCPIP\Parameters注册表子键，在Parameters子键下创建或修改名为MaxUserPort的REG_DWORD值，该值的范围是从5000到65534，缺省值为5000，建议将该值设置为65534。</p><h2 id="6-动态储备"><a href="#6-动态储备" class="headerlink" title="6.动态储备"></a>6.动态储备</h2><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><p>　　动态储备的值使系统能自动调整其配置，以接受大量突发的连接请求。如果同时接收到大量连接请求，超出了系统的处理能力，那么动态储备就会自动增大系统支持的暂挂连接的数量（即Client已请求而Server尚未处理的等待连接数，TCP连接的总数包括已连接数与等待连接数），从而可减少连接失败的数量。系统的处理能力和支持的暂挂连接的数量不足时，Client的连接请求将直接被拒绝。</p><p>　　缺省情况下，Windows 不启用动态储备，可以通过以下操作进行开启和设置：</p><p>　　浏览至HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\AFD\Parameters注册表子键，在Parameters子键下创建或修改下列名称的REG_DWORD值。</p><p>EnableDynamicBacklog，值为1，表示开启动态储备。</p><p>MinimumDynamicBacklog，值为128，表示支持的最小暂挂连接的数量为128。</p><p>MaximumDynamicBacklog，值为2048，表示支持的最大暂挂连接的数量为2048。对于高并发短连接的Server，建议最大值设为1024及以上。</p><p>DynamicBacklogGrowthDelta，值为128，表示支持的暂挂连接的数量的增量为128，即数量不足时自增长128，直到达到设定的最大值，如2048。</p><h2 id="7-KeepAliveTime"><a href="#7-KeepAliveTime" class="headerlink" title="7.KeepAliveTime"></a>7.KeepAliveTime</h2><p>　　KeepAliveTime的值控制系统尝试验证空闲连接是否仍然完好的频率。如果该连接在一段时间内没有活动，那么系统会发送保持连接的信号，如果网络正常并且接收方是活动的，它就会响应。如果需要对丢失接收方的情况敏感，也就是说需要更快地发现是否丢失了接收方，请考虑减小该值。而如果长期不活动的空闲连接的出现次数较多，但丢失接收方的情况出现较少，那么可能需要增大该值以减少开销。</p><p>　　缺省情况下，如果空闲连接在7200000毫秒（2小时）内没有活动，系统就会发送保持连接的消息。 通常建议把该值设为1800000毫秒，从而丢失的连接会在30分钟内被检测到。具体操作：</p><p>　　浏览至HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TCPIP\Parameters注册表子键，在Parameters子键下创建或修改名为KeepAliveTime的REG_DWORD值，为该值设置适当的毫秒数。</p><h2 id="8-KeepAliveInterval"><a href="#8-KeepAliveInterval" class="headerlink" title="8.KeepAliveInterval"></a>8.KeepAliveInterval</h2><p>　　KeepAliveInterval的值表示未收到另一方对“保持连接”信号的响应时，系统重复发送“保持连接”信号的频率。在无任何响应的情况下，连续发送“保持连接”信号的次数超过TcpMaxDataRetransmissions（下文将介绍）的值时，将放弃该连接。如果网络环境较差，允许较长的响应时间，则考虑增大该值以减少开销；如果需要尽快验证是否已丢失接收方，则考虑减小该值或TcpMaxDataRetransmissions值。</p><p>　　缺省情况下，在未收到响应而重新发送“保持连接”的信号之前，系统会等待1000毫秒（1秒），可以根据具体需求修改，具体操作：</p><p>　　浏览至HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TCPIP\Parameters注册表子键，在Parameters子键下创建或修改名为KeepAliveInterval的REG_DWORD值，为该值设置适当的毫秒数。</p><h2 id="9-TcpMaxDataRetransmissions"><a href="#9-TcpMaxDataRetransmissions" class="headerlink" title="9.TcpMaxDataRetransmissions"></a>9.TcpMaxDataRetransmissions</h2><p>　　TcpMaxDataRetransmissions的值表示TCP数据重发，系统在现有连接上对无应答的数据段进行重发的次数。如果网络环境很差，可能需要提高该值以保持有效的通信，确保接收方收到数据；如果网络环境很好，或者通常是由于丢失接收方而导致数据的丢失，那么可以减小该值以减少验证接收方是否丢失所花费的时间和开销。</p><p>　　缺省情况下，系统会重新发送未返回应答的数据段5次，可以根据具体需求修改，具体操作：</p><p>　　浏览至HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TCPIP\Parameters注册表子键，在Parameters子键下创建或修改名为TcpMaxDataRetransmissions的REG_DWORD值，该值的范围是从0到4294967295，缺省值为5，根据实际情况进行设置。</p><h2 id="10-TcpMaxConnectRetransmisstions"><a href="#10-TcpMaxConnectRetransmisstions" class="headerlink" title="10.TcpMaxConnectRetransmisstions"></a>10.TcpMaxConnectRetransmisstions</h2><p>　　TcpMaxConnectRetransmisstions的值表示TCP连接重发，TCP退出前重发非确认连接请求（SYN）的次数。对于每次尝试，重发超时是成功重发的两倍。在Windows Server 2003中默认超时次数是2，默认超时时间为3秒（在注册表项TCPInitialRTT中）。速度较慢的WAN连接中超时时间可相应增加，不同环境中可能会有不同的最优化设置，需要在实际环境中测试确定。超时时间不要设置太大否则将不会发生网络连接超时时间。具体操作：</p><p>　　浏览至HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TCPIP\Parameters注册表子键，在Parameters子键下创建或修改名为TcpMaxConnectRetransmisstions的REG_DWORD值，该值的范围是从0到255，缺省值为2，根据实际情况进行设置。然后在Parameters子键下创建或修改名为TCPInitialRTT的REG_DWORD值，同样根据实际情况进行设置。</p><h2 id="11-TcpAckFrequency"><a href="#11-TcpAckFrequency" class="headerlink" title="11.TcpAckFrequency"></a>11.TcpAckFrequency</h2><p>　　TcpAckFrequency的值表示系统发送应答消息的频率。如果值为2，那么系统将在接收到2个分段之后发送应答，或是在接收到1个分段但在200毫秒内没有接收到任何其他分段的情况下发送应答；如果值为3，那么系统将在接收到3个分段之后发送应答，或是在接收到1个或2个分段但在200毫秒内没有接收到任何其他分段的情况下发送应答，以此类推。如果要通过消除应答延迟来缩短响应时间，那么建议将该值设为1。在此情况下，系统会立即发送对每个分段的应答；如果连接主要用于传输大量数据，而200毫秒的延迟并不重要，那么可以减小该值以降低应答的开销。</p><p>　　缺省情况下，系统将该值设为2，即每隔一个分段应答一次。该值的有效范围是0到255，其中0表示使用缺省值2，可以根据具体需求修改，具体操作：</p><p>　　浏览至HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TCPIP\Parameters\Interfaces\xx（xx由网络适配器决定）注册表子键，在xx子键下创建或修改名为TcpAckFrequency的REG_DWORD值，该值的范围是从1到13，缺省值为2，根据希望每发送几个分段返回一个应答而设置该值，建议百兆网络设为5，千兆网络设为13。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py文件服务器搭建</title>
      <link href="/2021/10/20/py-wen-jian-fu-wu-qi-da-jian/"/>
      <url>/2021/10/20/py-wen-jian-fu-wu-qi-da-jian/</url>
      
        <content type="html"><![CDATA[<p>背景：每次从win端上传文件到不同的linux，之前一直使用rz嫌弃麻烦，阅读到python有提供一个简易的文件服务器实现，如此便记录一下。</p><p>前置条件:本机（win）有python环境，</p><p>操作过程：</p><ul><li>选择共享的文件夹,地址栏 键入: cmd，进入dos交互页：<code>python -m http.server</code></li><li>尝试访问网页ip:8000，若能打开服务，至此一个简漏的共享文件服务器就搭好了；</li><li>linux里面wget想要的包</li><li>带有浏览器的直接可以在ip:port打开实例</li></ul><p>隐藏cmd黑框，并开机自启：win桌面上，cmd的大黑框比较碍眼，可以起个bat文件，内容如下：</p><p><code>@echo off</code><br><code>if "%1"=="h" goto begin</code><br><code>start mshta vbscript:createobject("wscript.shell").run("""%~nx0"" h",0)(window.close)&amp;&amp;exit</code><br><code>:begin</code><br><code>python -m http.server</code><br><code>pause</code></p><ul><li><p>添加到开机自启：</p></li><li><p>使用win+r 弹出运行窗口，输入 shell:startup 弹出启动文件夹，在文件夹内添加bat的快捷方式。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 旮旯杂杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10网络正常，图标异常修复方式</title>
      <link href="/2021/10/14/win10-geng-xin-hou-de-xian-shi-wu-wang-luo-dan-shi-ke-yi-shang-wang-wen-ti/"/>
      <url>/2021/10/14/win10-geng-xin-hou-de-xian-shi-wu-wang-luo-dan-shi-ke-yi-shang-wang-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="注册表有所变化，将他改回去"><a href="#注册表有所变化，将他改回去" class="headerlink" title="##注册表有所变化，将他改回去"></a>##注册表有所变化，将他改回去</h1><p>1.crtl+r 输入regedit</p><p>2.path这边键入定位如下</p><p>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NlaSvc\Parameters\Internet</p><p>3.手动戳如下</p><pre class=" language-markdown"><code class="language-markdown">"ActiveDnsProbeContent"="131.107.255.255""ActiveDnsProbeContentV6"="fd3e:4f5a:5b81::1""ActiveDnsProbeHost"="dns.msftncsi.com""ActiveDnsProbeHostV6"="dns.msftncsi.com""ActiveWebProbeContent"="Microsoft NCSI""ActiveWebProbeContentV6"="Microsoft NCSI""ActiveWebProbeHost"="www.msftncsi.com""ActiveWebProbeHostV6"="ipv6.msftncsi.com""ActiveWebProbePath"="ncsi.txt""ActiveWebProbePathV6"="ncsi.txt""CaptivePortalTimer"=dword:00000000"CaptivePortalTimerBackOffIncrementsInSeconds"=dword:00000005"CaptivePortalTimerMaxInSeconds"=dword:0000001e"PassivePollPeriod"=dword:0000000f"StaleThreshold"=dword:0000001e"WebTimeout"=dword:00000023"EnableActiveProbing"=dword:00000001</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 旮旯杂杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题杂记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
