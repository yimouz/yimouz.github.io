<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>性能笔记-几个瓶颈</title>
      <link href="/2020/05/26/xing-neng-bi-ji-ji-ge-ping-jing/"/>
      <url>/2020/05/26/xing-neng-bi-ji-ji-ge-ping-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="性能测试的几个瓶颈术语"><a href="#性能测试的几个瓶颈术语" class="headerlink" title="性能测试的几个瓶颈术语"></a>性能测试的几个瓶颈术语</h1><h2 id="软件瓶颈"><a href="#软件瓶颈" class="headerlink" title="软件瓶颈"></a>软件瓶颈</h2><h3 id="应用软件瓶颈"><a href="#应用软件瓶颈" class="headerlink" title="应用软件瓶颈"></a>应用软件瓶颈</h3><p>web服务器包括数据库等中间件导致的响应时间增加</p><h3 id="应用程序瓶颈"><a href="#应用程序瓶颈" class="headerlink" title="应用程序瓶颈"></a>应用程序瓶颈</h3><p>处理问题只能串行不能并行导致的响应时间增加</p><h2 id="硬件瓶颈"><a href="#硬件瓶颈" class="headerlink" title="硬件瓶颈"></a>硬件瓶颈</h2><p>cpu ram 持续利用率过高超过95%</p><h2 id="操作系统瓶颈"><a href="#操作系统瓶颈" class="headerlink" title="操作系统瓶颈"></a>操作系统瓶颈</h2><p>例如win系虚拟内存的设置交互</p><h2 id="网络设备瓶颈"><a href="#网络设备瓶颈" class="headerlink" title="网络设备瓶颈"></a>网络设备瓶颈</h2><p>负载均衡 防火墙 交换机 相关</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GIT远程仓管理hexo文档</title>
      <link href="/2020/05/22/shi-yong-git-yuan-cheng-cang-guan-li-hexo-wen-dang/"/>
      <url>/2020/05/22/shi-yong-git-yuan-cheng-cang-guan-li-hexo-wen-dang/</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo简单的命令"><a href="#Hexo简单的命令" class="headerlink" title="Hexo简单的命令"></a>Hexo简单的命令</h3><ol><li>终端执行<code>hexo new 新文章</code>命令，此时本地<code>source/_post</code>目录下会新建<code>新文章.md</code>文件</li><li>打开 <code>新文章.md</code>编写完成后，终端执行<code>hexo g</code>编译</li><li>终端执行<code>hexo s</code>本地预览</li><li>终端执行<code>hexo d</code>推送到远程仓<strong>master</strong>分支</li></ol><h3 id="场景备份的建议"><a href="#场景备份的建议" class="headerlink" title="场景备份的建议"></a>场景备份的建议</h3><ul><li>个人pc比较多,有时候不是专门用一台机器来做一件事,公司家庭暂住地等等等等,多台pc的使用场景</li><li>硬盘损坏,</li><li>电脑丢失</li><li>如果你还算比较珍你的部落格,不管是什么情况,都建议进行备份,鸡蛋不在一个篮子里,有备自然无患<br>有些人选择新建一个远程仓来进行拉取上传,有些人选择每次用u盘热拷数据,而我选择在原来远程仓基础上新建一个分支进行源码上传,原因嘛,自然是怎么方便怎么来.</li></ul><h4 id="新建git分支"><a href="#新建git分支" class="headerlink" title="新建git分支"></a>新建git分支</h4><p>终端执行<code>git branch</code><br>查看分支情况,如果没有意外你只有一个<strong>master</strong>分支<br>终端执行<code>git checkout -b dev</code><br>创建并切换到<strong>dev</strong>分支,其中<strong>dev</strong>是你的自定义分支名<br>再次执行<code>git branch</code><br>你可以看到列出的分支包含<strong>dev/master</strong><br>当前分支带有*号</p><h4 id="发布时选择的分支"><a href="#发布时选择的分支" class="headerlink" title="发布时选择的分支"></a>发布时选择的分支</h4><p>github仓库初始化生成一个master分支，这没什么特殊含义,只是init的时候就叫这个而已.<br>不过这对hexo来讲,生成的静态页面也是默认在master分支,如非魔改框架,请务必留着.<br>我这里选择<strong>dev</strong>分支作为我的源码托管分支,<br>你可以在克隆项目的时候指定分支<code>git clone -b dev xxurl</code>如果你正好也感兴趣,我会在后面描述  </p><h4 id="本地与远程仓库关联"><a href="#本地与远程仓库关联" class="headerlink" title="本地与远程仓库关联"></a>本地与远程仓库关联</h4><p>终端执行<code class="shell  language-shell">git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yimouz/yimouz.github.io.git</code>  </p><blockquote><p>这里的origin只是一个易标识,你可以修改,比如hexo,后面这一串是仓库ssh地址,请不要错误关联到我的仓库,错误关联但没有配对的密钥自然没有用.除了ssh还可以选择http方式,具体看你个人选择.</p></blockquote><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><p>推送到dev分支。<br>本地有许多文件,保留文章跟一些你觉得重要的，其他无关的文件并不希望推送，<br>使用<code>.gitignore</code>文件吧<br>把这些不想要的推送的保存到你ignore,比如如下一些:<br>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/<br>添加完就可以试一下推送了<br>终端执行：</p><pre><code>git add .git commit -m '你的提交信息'git push hexo dev</code></pre><h4 id="删除dev分支的某些文件"><a href="#删除dev分支的某些文件" class="headerlink" title="删除dev分支的某些文件"></a>删除dev分支的某些文件</h4><p>dev继承自master会带上master已经存在的分支内容<br>类似public<br>如果你跟我一样看着他们常常难受<br>不要犹豫,本地环境.<br>按下你的delete fireout it<br>删除完,终端执行<br>当然不删也可以</p><pre><code>git add .git commit -m '同样填写你的注释信息'git push hexo dev</code></pre><p>你会发现.ignore里携带的都没有带上去了.<br>这就是ignore</p><h3 id="多pc"><a href="#多pc" class="headerlink" title="多pc"></a>多pc</h3><p>回到这个问题,新电脑了怎么办,硬盘坏了怎么办  </p><ol><li>下载git </li><li>安装node npm </li><li>克隆你的分支<code>git clone -b dev 你的url</code>   </li><li>初始化init</li><li>密钥</li><li><p>关联到你的远程仓</p><blockquote><p>当然不要忘记</p><pre><code>npm install hexo   npm install hexo-deployer-git -save</code></pre><p>是不是又回到了熟悉的环境</p></blockquote><h3 id="好了知道你有多pc使用习惯了-git就非常适合这种多端协作的场景-你要知道他是干嘛的"><a href="#好了知道你有多pc使用习惯了-git就非常适合这种多端协作的场景-你要知道他是干嘛的" class="headerlink" title="好了知道你有多pc使用习惯了,git就非常适合这种多端协作的场景,你要知道他是干嘛的"></a>好了知道你有多pc使用习惯了,git就非常适合这种多端协作的场景,你要知道他是干嘛的</h3><p>在公司划水,写写博客 一顿操作在push之后进入贤者模式<br>晚上或者周末在家,心潮澎拜,idea遍及<br>马不停蹄打开git<br><code>`</code><br>/git pull &lt;远程仓ssh&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;   </p></li></ol><p>git pull <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yimouz/yimouz.github.io.git dev:dev<br>/拉取并合并到你的本地环境<br><code>`</code></p><blockquote><p>至此就结束了!</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
